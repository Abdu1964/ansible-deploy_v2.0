---
- name: Disable CD-ROM repositories
  become: yes
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb cdrom:'
    line: '#\0'
    backrefs: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Update apt cache
  apt:
    update_cache: yes
- name: Set configuration variables
  ansible.builtin.set_fact:
    repo_url: "https://github.com/dawit-melka/custom-atomspace-builder.git"
    install_dir: "/opt/custom-atomspace-builder"
    python_version: "3.8"

- name: Install system dependencies
  ansible.builtin.apt:
    name:
      - git
      - maven
      - openjdk-11-jdk
      - python3
      - python3-pip
      - python3-venv
    state: present
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: Clone repository
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ install_dir }}"
    version: master
    clone: yes
    update: yes

- name: Build with Maven (skip tests)
  ansible.builtin.shell: |
    mvn clean install -pl hugegraph-client,hugegraph-loader -am \
        -Dmaven.javadoc.skip=true \
        -DskipTests \
        -Dcheckstyle.skip=true \
        -Deditorconfig.skip=true
  args:
    chdir: "{{ install_dir }}"

- name: Create Python virtual environment
  ansible.builtin.command: "python3 -m venv {{ install_dir }}/venv"
  args:
    chdir: "{{ install_dir }}"

- name: Install Python requirements
  ansible.builtin.pip:
    requirements: "{{ install_dir }}/requirements.txt"
    virtualenv: "{{ install_dir }}/venv"
    virtualenv_command: "python3 -m venv"

- name: Create output directory
  ansible.builtin.file:
    path: "{{ install_dir }}/output"
    state: directory
    mode: '0755'

- name: Configure app.py
  ansible.builtin.blockinfile:
    path: "{{ install_dir }}/app.py"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - APP CONFIG"
    block: |
      HUGEGRAPH_LOADER_PATH = "./hugegraph-loader/apache-hugegraph-loader-incubating-1.5.0/bin/hugegraph-loader.sh"
      HUGEGRAPH_HOST = "localhost"
      HUGEGRAPH_PORT = "8080"
      HUGEGRAPH_GRAPH = "hugegraph"
      ANNOTATION_SERVICE_URL = "http://your-annotation-service:5800/annotation/load"
    insertafter: "^import"

- name: Check for running uvicorn processes
  ansible.builtin.shell: |
    pgrep -f "uvicorn app:app"
  register: uvicorn_processes
  changed_when: false
  ignore_errors: yes

- name: Kill existing uvicorn processes
  ansible.builtin.shell: |
    pkill -f "uvicorn app:app"
  when: uvicorn_processes.rc == 0
  ignore_errors: yes

- name: Start uvicorn service
  ansible.builtin.shell: |
    nohup {{ install_dir }}/venv/bin/uvicorn app:app --host 0.0.0.0 --port 8000 --reload > {{ install_dir }}/uvicorn.log 2>&1 &
  args:
    chdir: "{{ install_dir }}"
  async: 60
  poll: 0

- name: Verify service is running
  ansible.builtin.shell: |
    pgrep -f "uvicorn app:app"
  register: uvicorn_status
  changed_when: false
  failed_when: uvicorn_status.rc != 0